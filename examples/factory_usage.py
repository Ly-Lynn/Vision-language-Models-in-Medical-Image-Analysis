"""
V√≠ d·ª• s·ª≠ d·ª•ng ModelFactory ƒë·ªÉ t·∫°o v√† load models

Script n√†y minh h·ªça c√°c c√°ch kh√°c nhau ƒë·ªÉ s·ª≠ d·ª•ng ModelFactory,
bao g·ªìm:
- T·∫°o model t·ª´ pretrained weights
- Load model t·ª´ checkpoint local
- S·ª≠ d·ª•ng c√°c convenience functions
"""

import torch
from modules.models.factory import ModelFactory, create_medclip, create_biomedclip, create_entrep
from modules.utils.logging_config import get_logger

logger = get_logger(__name__)


def example_1_create_default_models():
    """V√≠ d·ª• 1: T·∫°o models v·ªõi c·∫•u h√¨nh m·∫∑c ƒë·ªãnh"""
    logger.info("=" * 60)
    logger.info("V√ç D·ª§ 1: T·∫°o models v·ªõi c·∫•u h√¨nh m·∫∑c ƒë·ªãnh")
    logger.info("=" * 60)
    
    # T·∫°o MedCLIP model v·ªõi pretrained weights
    logger.info("\nüìå T·∫°o MedCLIP model:")
    medclip_model = ModelFactory.create_model(
        model_type='medclip',
        pretrained=True
    )
    logger.info(f"‚úÖ MedCLIP model: {type(medclip_model)}")
    
    # T·∫°o BioMedCLIP model
    logger.info("\nüìå T·∫°o BioMedCLIP model:")
    biomedclip_model = ModelFactory.create_model(
        model_type='biomedclip'
    )
    logger.info(f"‚úÖ BioMedCLIP model: {type(biomedclip_model)}")
    
    # T·∫°o ENTRep model
    logger.info("\nüìå T·∫°o ENTRep model:")
    entrep_model = ModelFactory.create_model(
        model_type='entrep',
        vision_encoder_type='dinov2',
        text_encoder_type='clip'
    )
    logger.info(f"‚úÖ ENTRep model: {type(entrep_model)}")


def example_2_load_from_checkpoint():
    """V√≠ d·ª• 2: Load models t·ª´ checkpoint local"""
    logger.info("\n" + "=" * 60)
    logger.info("V√ç D·ª§ 2: Load models t·ª´ checkpoint local")
    logger.info("=" * 60)
    
    # ƒê∆∞·ªùng d·∫´n checkpoint (thay th·∫ø b·∫±ng checkpoint th·ª±c t·∫ø)
    checkpoint_path = "checkpoints/entrep_best.pt"
    
    logger.info(f"\nüìå Load ENTRep model t·ª´ checkpoint:")
    logger.info(f"   Checkpoint: {checkpoint_path}")
    
    try:
        # C√°ch 1: S·ª≠ d·ª•ng ModelFactory.create_model
        model = ModelFactory.create_model(
            model_type='entrep',
            checkpoint=checkpoint_path,
            vision_encoder_type='dinov2',
            text_encoder_type='clip',
            pretrained=False,  # Kh√¥ng load pretrained weights v√¨ ƒë√£ c√≥ checkpoint
            device='cuda'
        )
        logger.info(f"‚úÖ Model loaded successfully: {type(model)}")
        
        # C√°ch 2: S·ª≠ d·ª•ng convenience function
        model_alt = create_entrep(
            checkpoint=checkpoint_path,
            vision_encoder='dinov2',
            text_encoder='clip'
        )
        logger.info(f"‚úÖ Model loaded (alt method): {type(model_alt)}")
        
    except FileNotFoundError:
        logger.warning(f"‚ö†Ô∏è Checkpoint kh√¥ng t·ªìn t·∫°i: {checkpoint_path}")
        logger.info("   (ƒê√¢y ch·ªâ l√† v√≠ d·ª•, thay th·∫ø b·∫±ng checkpoint th·ª±c t·∫ø)")


def example_3_convenience_functions():
    """V√≠ d·ª• 3: S·ª≠ d·ª•ng convenience functions"""
    logger.info("\n" + "=" * 60)
    logger.info("V√ç D·ª§ 3: S·ª≠ d·ª•ng convenience functions")
    logger.info("=" * 60)
    
    # T·∫°o MedCLIP v·ªõi vision encoder kh√°c nhau
    logger.info("\nüìå T·∫°o MedCLIP v·ªõi ResNet vision encoder:")
    medclip_resnet = create_medclip(
        vision_encoder='resnet',
        pretrained=True
    )
    logger.info(f"‚úÖ MedCLIP (ResNet): {type(medclip_resnet)}")
    
    logger.info("\nüìå T·∫°o MedCLIP v·ªõi ViT vision encoder:")
    medclip_vit = create_medclip(
        vision_encoder='vit',
        pretrained=True
    )
    logger.info(f"‚úÖ MedCLIP (ViT): {type(medclip_vit)}")
    
    # T·∫°o BioMedCLIP
    logger.info("\nüìå T·∫°o BioMedCLIP:")
    biomedclip = create_biomedclip()
    logger.info(f"‚úÖ BioMedCLIP: {type(biomedclip)}")
    
    # T·∫°o ENTRep v·ªõi c·∫•u h√¨nh custom
    logger.info("\nüìå T·∫°o ENTRep v·ªõi c·∫•u h√¨nh custom:")
    entrep = create_entrep(
        vision_encoder='dinov2',
        text_encoder='clip',
        feature_dim=768,
        dropout=0.1,
        num_classes=7
    )
    logger.info(f"‚úÖ ENTRep (custom): {type(entrep)}")


def example_4_create_zero_shot_classifier():
    """V√≠ d·ª• 4: T·∫°o zero-shot classifier"""
    logger.info("\n" + "=" * 60)
    logger.info("V√ç D·ª§ 4: T·∫°o zero-shot classifier")
    logger.info("=" * 60)
    
    # Class names cho ENTRep dataset
    class_names = ['nose', 'vocal-throat', 'ear', 'throat']
    
    # T·∫°o zero-shot classifier cho ENTRep
    logger.info("\nüìå T·∫°o zero-shot classifier cho ENTRep:")
    classifier = ModelFactory.create_zeroshot_classifier(
        model_type='entrep',
        class_names=class_names,
        ensemble=True
    )
    logger.info(f"‚úÖ Zero-shot classifier: {type(classifier)}")
    
    # V·ªõi checkpoint
    try:
        logger.info("\nüìå T·∫°o zero-shot classifier t·ª´ checkpoint:")
        classifier_with_ckpt = ModelFactory.create_zeroshot_classifier(
            model_type='entrep',
            class_names=class_names,
            checkpoint='checkpoints/entrep_best.pt',
            ensemble=True
        )
        logger.info(f"‚úÖ Zero-shot classifier (checkpoint): {type(classifier_with_ckpt)}")
    except FileNotFoundError:
        logger.warning("‚ö†Ô∏è Checkpoint kh√¥ng t·ªìn t·∫°i (ch·ªâ l√† v√≠ d·ª•)")


def example_5_device_management():
    """V√≠ d·ª• 5: Qu·∫£n l√Ω device"""
    logger.info("\n" + "=" * 60)
    logger.info("V√ç D·ª§ 5: Qu·∫£n l√Ω device")
    logger.info("=" * 60)
    
    # T·∫°o model tr√™n CPU
    logger.info("\nüìå T·∫°o model tr√™n CPU:")
    model_cpu = ModelFactory.create_model(
        model_type='entrep',
        device='cpu',
        vision_encoder_type='dinov2'
    )
    logger.info(f"‚úÖ Model device: {next(model_cpu.parameters()).device}")
    
    # T·∫°o model tr√™n CUDA (n·∫øu available)
    if torch.cuda.is_available():
        logger.info("\nüìå T·∫°o model tr√™n CUDA:")
        model_cuda = ModelFactory.create_model(
            model_type='entrep',
            device='cuda',
            vision_encoder_type='dinov2'
        )
        logger.info(f"‚úÖ Model device: {next(model_cuda.parameters()).device}")
    else:
        logger.info("\n‚ö†Ô∏è CUDA kh√¥ng available, skip v√≠ d·ª• CUDA")
    
    # Auto-detect device (m·∫∑c ƒë·ªãnh)
    logger.info("\nüìå T·∫°o model v·ªõi auto-detect device:")
    model_auto = ModelFactory.create_model(
        model_type='entrep',
        vision_encoder_type='dinov2'
    )
    logger.info(f"‚úÖ Model device (auto): {next(model_auto.parameters()).device}")


def example_6_list_available_models():
    """V√≠ d·ª• 6: Li·ªát k√™ models v√† classifiers c√≥ s·∫µn"""
    logger.info("\n" + "=" * 60)
    logger.info("V√ç D·ª§ 6: Li·ªát k√™ models v√† classifiers c√≥ s·∫µn")
    logger.info("=" * 60)
    
    # Li·ªát k√™ available models
    logger.info("\nüìå Available models:")
    available_models = ModelFactory.get_available_models()
    for model_type, variants in available_models.items():
        logger.info(f"  {model_type}: {variants}")
    
    # Li·ªát k√™ available classifiers
    logger.info("\nüìå Available classifiers:")
    available_classifiers = ModelFactory.get_available_classifiers()
    for model_type, task_types in available_classifiers.items():
        logger.info(f"  {model_type}: {task_types}")
    
    # Print full registry
    logger.info("\nüìå Full registry:")
    ModelFactory.print_registry()


def main():
    """Ch·∫°y t·∫•t c·∫£ c√°c v√≠ d·ª•"""
    logger.info("üöÄ B·∫ÆT ƒê·∫¶U C√ÅC V√ç D·ª§ S·ª¨ D·ª§NG MODELFACTORY")
    logger.info("=" * 60)
    
    try:
        # V√≠ d·ª• 1: T·∫°o models m·∫∑c ƒë·ªãnh
        example_1_create_default_models()
        
        # V√≠ d·ª• 2: Load t·ª´ checkpoint
        example_2_load_from_checkpoint()
        
        # V√≠ d·ª• 3: S·ª≠ d·ª•ng convenience functions
        example_3_convenience_functions()
        
        # V√≠ d·ª• 4: T·∫°o zero-shot classifier
        example_4_create_zero_shot_classifier()
        
        # V√≠ d·ª• 5: Qu·∫£n l√Ω device
        example_5_device_management()
        
        # V√≠ d·ª• 6: Li·ªát k√™ models
        example_6_list_available_models()
        
        logger.info("\n" + "=" * 60)
        logger.info("‚úÖ HO√ÄN TH√ÄNH T·∫§T C·∫¢ C√ÅC V√ç D·ª§")
        logger.info("=" * 60)
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi ch·∫°y v√≠ d·ª•: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()

